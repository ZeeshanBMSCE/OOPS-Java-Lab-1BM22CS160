--LAB 01--     18/12/23-------------------------------------------------------------------------------------------------------------------------------------

import java.util.Scanner;
import java.lang.Math;
class quadratic
{
public static void main(String xx[])
{
float a,b,c,d,r1,r2;
Scanner s1=new Scanner(System.in);
System.out.println("enter the coefficients");
a=s1.nextFloat();
b=s1.nextFloat();
c=s1.nextFloat();
d=b*b-(4*a*c);
if(d>0)
{
r1=(-b+(float)Math.sqrt(d))/(2*a);
r2=(-b-(float)Math.sqrt(d))/(2*a);
System.out.println("r1="+r1);
System.out.println("r2="+r2);
}
else if(d==0)
{
r1=(-b)/(2*a);
r2=(-b)/(2*a);
System.out.println("r1="+r1);
System.out.println("r2="+r2);
}
else
{
r1=(float)Math.sqrt(-d)/(2*a);
r2=-1*r1;
System.out.println("roots:\n"+"r1="+(-b/(2*a))+"+"+r1+"i"+"\nr2="+(-b/(2*a))+r2+"i");
}
}
}



--LAB 02--    01/01/24--------------------------------------------------------------------------------------------------------------------------------------

public class Sgpa{
	String usn,name;
	int credits[] = new int[8];
	float marks[]= new float[8];
	public void accept_name_usn(String name,String usn)
	{
	this.name= name;
	this.usn=usn;
	}

public void accept_credits(int credits[]) 
{
	this.credits=credits;
}

public void accept_marks(float marks[]) 
{
	this.marks=marks;
}

public String return_usn() 
{
	return this.usn;
}

public String return_name() 
{
	return this.name;
}

public int [] return_credits() 
{
	return this.credits;
}

public float [] return_marks() 
{
	return this.marks;
}

public float sgpa(int credits[], float marks[]) 
	{
	int total_credits=0;
	float marks_credits=0;
	for(int i=0; i<8; i++) {
	total_credits=total_credits+credits[i];
	}

for(int i=0; i<8; i++) 
{
	marks_credits=marks_credits+(credits[i]*marks[i]);
}

return marks_credits/total_credits;
}

public static void main(String[] args) 
{
	Sgpa p = new Sgpa();
	p.accept_name_usn("Mhammed Zeeshan Umar", "1BM22CS160");
	int [] credits_3rd={4,4,4,3,3,2,1,1};
	p.accept_credits(credits_3rd);
	float [] marks_3rd =  {8.23344f, 7.54454f, 7.3456f, 8.234646f, 8.46774f, 8.34553f, 7.345346f, 7.53454f};
	p.accept_marks(marks_3rd);
	System.out.println("usn: "+ p.return_usn());
	System.out.println("name: "+ p.return_name());                                                                                                                                                                                                                                
	int[] get_credits=p.return_credits();	
	for(int i=0; i<8; i++) {
	System.out.printf("credits:%d  ", get_credits[i]);
}
	System.out.println();
	float[] get_marks=p.return_marks();
	for(int i=0; i<8; i++) {
	System.out.printf("marks:%f  ", get_marks[i]);
	}
	System.out.println();
	System.out.println("sgpa: "+ p.sgpa(get_credits,get_marks));
}
} 


--LAB 03----------------------------------------------------------------------------------------------------------------------------------------------------     

import java.util.Scanner;
class Book{
    String name,author;
    int price,num_pages;
    Book(String n,String a,int p,int np){
        this.name=n;
this.author=a;
        this.price=p;
this.num_pages=np;
    }
    public String toString(){
        return "Book name:"+name+"\nAuthor:"+author+"\nPrice:"+price+"\nNumber of pages:"+num_pages;
    }
}
class BookDet {
    static Scanner s=new Scanner(System.in);
    static Book set(){
        s.nextLine();
        System.out.println("Enter book name");
        String n=s.nextLine();
        System.out.println("Enter author name");
        String a=s.nextLine();
        System.out.println("Enter price of book");
        int p=s.nextInt();
if(p<0){
System.out.println("Invalid Price");
System.exit(1);}
        System.out.println("Enter no of pages");
        int np=s.nextInt();
if(np<0)
{
System.out.println("Invalid no of pages");
System.exit(1);
}
        Book b1=new Book(n,a,p,np);
        return b1;
    }
    public static void main(String sx[]){
        int n;
        System.out.println("Enter no of books");
        n=s.nextInt();
        Book b[]=new Book[n];
        for(int i=0;i<n;i++)
            b[i]=set();
        System.out.println("Details of books entered");
        for(int i=0;i<n;i++)
            System.out.println(b[i]);
    }
}

--LAB 04      08/01/24--------------------------------------------------------------------------------------------------------------------------------------

abstract class Shape
{  
    abstract void Printarea();
    int a=10;
    int b=2;
}
class Rectangle extends Shape
{
    void Printarea()
    {      
       System.out.println("area of rectangle is "+(a*b));
    }
}    
class Triangle extends Shape
{
    void Printarea()
    {      
        System.out.println("area of triangle is "+(0.5*a*b));
    }
}  

class Circle extends Shape
{      
    void Printarea()
   {      
        System.out.println("area of circle is "+(3.14*a*a));
   }  
}  

class Area

{
    public static void main(String []args)      
    {    
       
       Shape b=new Circle();      
       b.Printarea();
       b=new Rectangle();
       b.Printarea();    
       b=new Triangle();
       b.Printarea();
}
}

--LAB 05     22-01-24---------------------------------------------------------------------------------------------------------------------------------------


package CIE;

public class Internals {
    public int[] marks;

    public Internals(int[] marks) {
        this.marks = marks;
    }
}



package CIE;

public class Student {
    String usn;
    public String name;
    int sem;

    public Student(String usn, String name, int sem) {
        this.usn = usn;
        this.name = name;
        this.sem = sem;
    }
}


package SEE;
import CIE.Student;

public class External extends Student {
    public int[] marks;

    public External(String usn, String name, int sem, int[] marks) {
        super(usn, name, sem);
        this.marks = marks;
    }
}


import CIE.Student;
import CIE.Internals;
import SEE.External;

public class CalculateMarks {
    public static void main(String[] args) {
        Internals internalsStudent = new Internals(new int[]{80, 75, 85, 90, 70});
        External externalStudent = new External("1MS16CS001", "John Doe", 5, new int[]{75, 70, 80, 85, 65});

        int[] finalMarks = new int[5];
        for (int i = 0; i < 5; i++) {
            finalMarks[i] = internalsStudent.marks[i] + externalStudent.marks[i];
        }

        System.out.println("Final Marks for Student " + externalStudent.name + ":");
        for (int i = 0; i < 5; i++) {
            System.out.println("Course " + (i + 1) + ": " + finalMarks[i]);
        }
    }
}


--LAB 06----------------------------------------------------------------------------------------------------------------------------------------------------  

import java.util.Scanner;

class WrongAge extends Exception {
    public WrongAge(String message) {
        super(message);
    }
}

class Father {
    private int age;

    public Father(int age) throws WrongAge {
        if (age < 0) {
            throw new WrongAge("Age cannot be negative");
        }
        this.age = age;
    }

    public int getAge() {
        return age;
    }
}

class Son extends Father {
    private int sonAge;

    public Son(int fatherAge, int sonAge) throws WrongAge {
        super(fatherAge);

        if (sonAge >= fatherAge) {
            throw new WrongAge("Son's age should be less than Father's age");
        }

        this.sonAge = sonAge;
    }

    public int getSonAge() {
        return sonAge;
    }
}

public class InheritanceExceptionExample {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter Father's Age: ");
            int fatherAge = scanner.nextInt();

            System.out.print("Enter Son's Age: ");
            int sonAge = scanner.nextInt();

            Father father = new Father(fatherAge);
            System.out.println("Father's Age: " + father.getAge());

            Son son = new Son(fatherAge, sonAge);
            System.out.println("Son's Age: " + son.getSonAge());
        } catch (WrongAge e) {
            System.out.println("Exception: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
}


--LAB 07     05-02-42---------------------------------------------------------------------------------------------------------------------------------------
  

class NewThread implements Runnable
{ Thread t;
   NewThread()
   {
     t=new Thread(this, "NThread");
	 System.out.println("CT:"+t);
	 t.start();
   }
   
  public void run()
   {
	   try
	   {
		   for(int n=10;n>0;n--)
		   {
			 System.out.println("BMS COLLEGE OF ENGG");
			 Thread.sleep(10000);
		   }
	   }
	   catch(InterruptedException ie)
	   {
		   System.out.println("Child Thread Interrupted");
	   }
	   System.out.println("Child Thread quitting");
   }
}

class BMSThread
{
	public static void main(String ss[])
	{
		new NewThread();
		System.out.println("Back in main");
		
		try
		{
			for(int n=10;n>0;n--)
			{
				System.out.println("CSE");
				Thread.sleep(2000);
			}
		}
		catch(InterruptedException ie)
		{
			System.out.println("Main Thread interrupted");
		}
		System.out.println("Main Thread quitting");
	}
}


--LAB 08        19-02-24------------------------------------------------------------------------------------------------------------------------------------


import java.util.Scanner;

class Account {
    String customerName;
    int accountNumber;
    double balance;

    Account(String customerName, int accountNumber) {
        this.customerName = customerName;
        this.accountNumber = accountNumber;
        this.balance = 0.0;
    }
    void deposit(double amount) {
        balance = balance+amount;
        System.out.println("Deposit successful.");
    }

    void displayBalance() {
        System.out.println("Balance: INR " + balance);
    }

    void compoundInterest() {
        System.out.println("Compound interest not available");
    }

    void withdraw(double amount) {
        if (amount <= balance) {
            balance =balance-amount;
            System.out.println("Withdrawal successful.");
        } else {
            System.out.println("Insufficient balance.");
        }
    }
}


class CurrentAccount extends Account {
    double minBalance;
    double serviceCharge;

    CurrentAccount(String customerName, int accountNumber, double minBalance, double serviceCharge) {
        super(customerName, accountNumber);
        this.minBalance = minBalance;
        this.serviceCharge = serviceCharge;
    }

	void withdraw(double amount) {
        if (balance - amount >= minBalance) {
            balance =balance-amount;
            System.out.println("Withdrawal successful.");
        } else {
            System.out.println("Insufficient balance. Service charge of INR" + serviceCharge );
            balance = balance-serviceCharge;
        }
    }
}



class SavingsAccount extends Account {
    double interestRate;

    SavingsAccount(String customerName, int accountNumber, double interestRate) {
        super(customerName, accountNumber);
        this.interestRate = interestRate;
    }

    
    void compoundInterest() {
        double interest = balance * (interestRate / 100);
        balance =balance+interest;
        System.out.println("Interest of INR" + interest );
    }
}



public class Bank {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        SavingsAccount savingsAccount = new SavingsAccount("Mohammed Zeeshan Umar", 1001, 5.0);
        CurrentAccount currentAccount = new CurrentAccount("Manvendra Singh Chouhan", 2001, 1000.0, 10.0);

        System.out.print("Enter deposit amount for savings account: ");
        double savingsDepositAmount = scanner.nextDouble();
        savingsAccount.deposit(savingsDepositAmount);
        savingsAccount.displayBalance();
        savingsAccount.compoundInterest();
        savingsAccount.displayBalance();

        System.out.print("Enter deposit amount for current account: ");
        double currentDepositAmount = scanner.nextDouble();
        currentAccount.deposit(currentDepositAmount);
        currentAccount.displayBalance();

        System.out.print("Enter withdrawal amount for current account: ");
        double withdrawalAmount = scanner.nextDouble();
        currentAccount.withdraw(withdrawalAmount);
        currentAccount.displayBalance();

        scanner.close();
    }
}


--LAB 09----------------------------------------------------------------------------------------------------------------------------------------------------

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class IntegerDivisionUI extends JFrame {
    private JTextField num1Field, num2Field, resultField;

    public IntegerDivisionUI() {
        setTitle("Integer Division Calculator");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(4, 2));

        panel.add(new JLabel("Num1:"));
        num1Field = new JTextField();
        panel.add(num1Field);

        panel.add(new JLabel("Num2:"));
        num2Field = new JTextField();
        panel.add(num2Field);

        panel.add(new JLabel("Result:"));
        resultField = new JTextField();
        resultField.setEditable(false);
        panel.add(resultField);

        JButton divideButton = new JButton("Divide");
        divideButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int num1 = Integer.parseInt(num1Field.getText());
                    int num2 = Integer.parseInt(num2Field.getText());
                    int result = num1 / num2;
                    resultField.setText(String.valueOf(result));
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Please enter valid integers for Num1 and Num2.");
                } catch (ArithmeticException ex) {
                    JOptionPane.showMessageDialog(null, "Cannot divide by zero.");
                }
            }
        });
        panel.add(divideButton);

        add(panel);
        setVisible(true);
    }

    public static void main(String[] args) {
        new IntegerDivisionUI();
    }
}




